/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package fr.memebattle.ressources.api;

import fr.memebattle.ressources.modele.api.ReponseImage;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-07-04T01:26:38.459157800-04:00[America/New_York]")
@Validated
@Api(value = "images", description = "the images API")
public interface ImagesApi {

    /**
     * POST /images/envoie : Ajouter une image dans la base de données
     *
     * @param idJoueur idJoueur (required)
     * @param image Image à ajouter (required)
     * @return Image ajoutée avec succès (status code 200)
     *         or Requête invalide (status code 400)
     */
    @ApiOperation(value = "Ajouter une image dans la base de données", nickname = "imagesEnvoiePost", notes = "", tags={ "Images", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Image ajoutée avec succès"),
        @ApiResponse(code = 400, message = "Requête invalide") })
    @PostMapping(
        value = "/images/envoie",
        consumes = { "multipart/form-data" }
    )
    ResponseEntity<Void> imagesEnvoiePost(@NotNull @ApiParam(value = "idJoueur", required = true) @Valid @RequestParam(value = "idJoueur", required = true) String idJoueur,@ApiParam(value = "Image à ajouter") @Valid @RequestPart(value = "image", required = true) MultipartFile image);


    /**
     * GET /images/recevoir/debut-tour : Récupérer l&#39;image au début du tour
     *
     * @param idJoueur idJoueur (required)
     * @return Image récupérée avec succès (status code 200)
     *         or Requête invalide (status code 400)
     */
    @ApiOperation(value = "Récupérer l'image au début du tour", nickname = "imagesRecevoirDebutTourGet", notes = "", response = ReponseImage.class, tags={ "Images", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Image récupérée avec succès", response = ReponseImage.class),
        @ApiResponse(code = 400, message = "Requête invalide") })
    @GetMapping(
        value = "/images/recevoir/debut-tour",
        produces = { "*/*" }
    )
    ResponseEntity<ReponseImage> imagesRecevoirDebutTourGet(@NotNull @ApiParam(value = "idJoueur", required = true) @Valid @RequestParam(value = "idJoueur", required = true) String idJoueur);


    /**
     * POST /images/recevoir/fin-tour : Récupérer les autres images de fin
     *
     * @param idJoueur idJoueur (required)
     * @return Images récupérées avec succès (status code 200)
     *         or Requête invalide (status code 400)
     */
    @ApiOperation(value = "Récupérer les autres images de fin", nickname = "imagesRecevoirFinTourPost", notes = "", response = ReponseImage.class, responseContainer = "List", tags={ "Images", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Images récupérées avec succès", response = ReponseImage.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Requête invalide") })
    @PostMapping(
        value = "/images/recevoir/fin-tour",
        produces = { "*/*" }
    )
    ResponseEntity<List<ReponseImage>> imagesRecevoirFinTourPost(@NotNull @ApiParam(value = "idJoueur", required = true) @Valid @RequestParam(value = "idJoueur", required = true) String idJoueur);

}
